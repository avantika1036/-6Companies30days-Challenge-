/* Question: You are given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.

Return the number of good leaf node pairs in the tree.

Difficulty: Medium */


// Solution 1: TC - O(n * m * m), SC - O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> solve(TreeNode* root, int distance, int& count)
    {
        if(root == NULL) return {};

        if(root -> left == NULL && root -> right == NULL) return {1}; // leaf node;

        vector<int> left_dist = solve(root -> left, distance, count); // dist from curr node to its left leaf nodes
        vector<int> right_dist = solve(root -> right, distance, count); // dist from curr node to its right leaf nodes

        for(int l: left_dist)
        {
            for(int r: right_dist)
            {
                if(l + r <= distance) count++;
            }
        }

        vector<int> parent_dist;
        for(int l: left_dist)
        {
            if(l + 1 <= distance) parent_dist.push_back(l + 1); 
        }

        for(int r: right_dist)
        {
            if(r + 1 <= distance) parent_dist.push_back(r + 1); 
        }

        return parent_dist;
    }

    int countPairs(TreeNode* root, int distance) {
        int count = 0;
        solve(root, distance, count);

        return count;
    }
};


// Solution 2: TC: O(n * n), SC - O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void makeGraph(TreeNode* curr, TreeNode* prev, unordered_map<TreeNode*, vector<TreeNode*>>& adj, unordered_set<TreeNode*>& st)
    {
        if(curr == NULL) return;

        if(curr -> left == NULL && curr -> right == NULL) // leaf node
        {
            st.insert(curr);
        }

        if(prev != NULL)
        {
            adj[prev].push_back(curr);
            adj[curr].push_back(prev);
        }

        makeGraph(curr -> left, curr, adj, st);
        makeGraph(curr -> right, curr, adj, st);
    }

    int countPairs(TreeNode* root, int distance) {
        int count = 0;
        unordered_map<TreeNode*, vector<TreeNode*>> adj;
        unordered_set<TreeNode*> st;

        makeGraph(root, NULL, adj, st);

        for(auto leaf: st)
        {
            queue<TreeNode*> q;
            unordered_set<TreeNode*> vis;
            q.push(leaf);
            vis.insert(leaf);

            for(int level = 0; level <= distance; level++) // go till level <= distance
            {
                int size = q.size();

                while(size--) // traverse one level
                {
                    TreeNode* curr = q.front();
                    q.pop();

                    if(curr != leaf && st.count(curr))
                    {
                        count++;
                    }

                    for(auto neighb: adj[curr])
                    {
                        if(!vis.count(neighb))
                        {
                            q.push(neighb);
                            vis.insert(neighb);
                        }
                    }
                }
            }
        }

        return count / 2;
    }
};