/* Question: You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si.

- For example, for s = "abaca", s1 == "a", s2 == "ca", s3 == "aca", etc.
The score of si is the length of the longest common prefix between si and sn (Note that s == sn).

Given the final string s, return the sum of the score of every si.

Difficulty: Hard */


class Solution {
public:
    long long sumScores(string s) {
        int n = s.length(), l = 0, r = 0;
        long long score = n; // string will mach to itself

        vector<int> z(n, 0);

        for(int i = 1; i < n; i++)
        {
            // take previously computed values
            if(i < r)
            {
                z[i] = z[i - l];

                if(i + z[i] > r) // boundary exceeded..limit it
                {
                    z[i] = r - i;
                }
            }

            // check if substring match prefix beyond boundary also
            while(i + z[i] < n && s[z[i]] == s[i + z[i]]) z[i]++;

            // change boundaries if window increases
            if(i + z[i] > r)
            {
                l = i;
                r = i + z[i];
            }

            score += z[i]; // prefix length matched for i
        }

        return score;
    }
};