/* Question: You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

Difficulty: Hard */


// Solution 1: Map-Based
// TC: O(N logN), SC: O(N)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        map<int, int> mpp;

        for(auto head: lists)
        {
            ListNode* temp = head;
            while(temp != NULL)
            {
                mpp[temp -> val]++;
                temp = temp -> next;
            }
        }

        ListNode* dummy = new ListNode(-1);
        ListNode* tail = dummy;

        for(auto [node, val]: mpp)
        {      
            while(val--)
            {
                tail -> next = new ListNode(node);
                tail = tail -> next;
            }
        }

        return dummy -> next;
    }
};


// Solution 2: Min-Heap
// TC: O(N logk), SC: O(k + N)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        auto comp = [](ListNode* a, ListNode* b)
        {
            return a -> val > b -> val;
        };

        priority_queue<ListNode*, vector<ListNode*>, decltype(comp)> minHeap;

        for(auto list: lists)
        {
            if(list != NULL) minHeap.push(list);
        }

        ListNode* dummy = new ListNode(-1);
        ListNode* curr = dummy;

        while(!minHeap.empty())
        {
            ListNode* node = minHeap.top();
            minHeap.pop();
            curr -> next = node;
            curr = curr -> next;

            if(node -> next != NULL)
            {
                minHeap.push(node -> next);
            }
        }

        return dummy -> next;
    }
};



// Solution 2: Divide & Conquer
// TC: O(N logk), SC: O(log k)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)
    {
        if(!l1) return l2;
        if(!l2) return l1;

        if(l1 -> val < l2 -> val)
        {
            l1 -> next = mergeTwoLists(l1 -> next, l2);
            return l1;
        }

        else
        {
            l2 -> next = mergeTwoLists(l1, l2 -> next);
            return l2;
        }
    }

    ListNode* divideAndConquer(vector<ListNode*>& lists, int left, int right)
    {
        if(left == right) return lists[left]; // base case
        int mid = (left + right) / 2;

        ListNode* l1 = divideAndConquer(lists, left, mid);
        ListNode* l2 = divideAndConquer(lists, mid + 1, right);
        return mergeTwoLists(l1, l2);
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;

        return divideAndConquer(lists, 0, lists.size() - 1);
    }
};