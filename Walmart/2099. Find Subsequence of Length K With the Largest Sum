/* Question: You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.

Return any such subsequence as an integer array of length k.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Difficulty: Easy */


// Solution 1: TC - O(nlog(n)), SC - O(n)
class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<pair<int, int>> v;

        for(int i = 0; i < nums.size(); i++)
        {
            v.push_back({nums[i], i});
        }

        sort(rbegin(v), rend(v)); // sort values in desc order
        unordered_set<int> st;

        for(auto [val, ind] : v)
        {
            if(!k--) break;

            st.insert(ind);
        }
        
        vector<int> res;
        for(int i = 0; i < nums.size(); i++)
        {
            if(st.count(i)) res.push_back(nums[i]);
        }

        return res;
    }
};


// Solution 2: TC - O(n*k), SC - O(k)
class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> res;
        int i;

        for(i = 0; i < k; i++)
        {
            res.push_back(nums[i]);
        }

        for(int j = i; j < nums.size(); j++)
        {
            int mini = min_element(res.begin(), res.end()) - res.begin(); // calculate in min element pos in the arr

            if(res[mini] < nums[j])
            {
                res.erase(res.begin() + mini);
                res.push_back(nums[j]);
            }
        }

        return res;
    }
};


// Solution 3: TC - O(nlog(k)), SC - O(k)