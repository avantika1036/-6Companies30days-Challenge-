/* Question: You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

- The node is currently uninfected.
- The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

Difficulty: Medium */


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int infect(unordered_map<int, vector<int>>& adj, int start, unordered_map<int, int>& vis)
    {
        queue<int> q;
        int mins = 0;

        q.push(start);

        while(!q.empty())
        {
            int qSize = q.size();
            bool hasInfected = false;

            for(int i = 0; i < qSize; i++)
            {
                int node = q.front();
                q.pop();

                vis[node] = 1;

                for(auto neighbour: adj[node])
                {
                    if(!vis[neighbour])
                    {
                        q.push(neighbour);
                        hasInfected = true;
                    }
                }
            }

            if(hasInfected) mins++;
        }

        return mins;
    }

    int amountOfTime(TreeNode* root, int start) {
        queue<TreeNode*> q;
        unordered_map<int, vector<int>> adj;
        unordered_map<int, int> vis;
        int mins = 0;

        q.push(root);

        while(!q.empty())
        {
            TreeNode* temp = q.front();
            q.pop();

            // left child
            if(temp -> left)
            {
                adj[temp -> val].push_back(temp -> left -> val);
                adj[temp -> left -> val].push_back(temp -> val);
                q.push(temp -> left);
            }

            // right child
            if(temp -> right)
            {
                adj[temp -> val].push_back(temp -> right -> val);
                adj[temp -> right -> val].push_back(temp -> val);
                q.push(temp -> right);
            }
        }

        return infect(adj, start, vis);
    }
};