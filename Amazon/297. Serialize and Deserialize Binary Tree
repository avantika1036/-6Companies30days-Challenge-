/* Question: Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Difficulty: Hard */


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string serial = "";

        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty())
        {
            TreeNode* temp = q.front();
            q.pop();

            if(temp)
            {
                serial += to_string(temp -> val) + ',';
                q.push(temp -> left);
                q.push(temp -> right);
            }

            else
            {
                serial += "null,";
            }
        }

        if(!serial.empty()) // remove the last ','
        {
            serial.pop_back();
        } 

        return serial;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data == "null") return NULL;

        stringstream ss(data);
        string word;

        getline(ss, word, ',');

        TreeNode* root = new TreeNode(stoi(word));

        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty())
        {
            TreeNode* node = q.front();
            q.pop();

            // left child
            getline(ss, word, ',');
            if(word != "null")
            {
                TreeNode* temp = new TreeNode(stoi(word));
                node -> left = temp;
                q.push(temp);
            }
            

            // right child
            getline(ss, word, ',');
            
            if(word != "null")
            {
                TreeNode* temp = new TreeNode(stoi(word));
                node -> right = temp;
                q.push(temp);
            }
            
        }

        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
