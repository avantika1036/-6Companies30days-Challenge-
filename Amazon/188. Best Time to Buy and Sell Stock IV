/* Question: You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Difficulty: Hard */


// Memoization
class Solution {
public:
    int findMaxProfit(vector<int>& prices, int k, int i, int buy, vector<vector<vector<int>>>& dp)
    {
        if(i == prices.size()) return 0;
        if(k == 0) return 0;

        if(dp[i][k][buy] != -1) return dp[i][k][buy];

        int pick, notPick;

        if(buy)
        {
            pick = -prices[i] + findMaxProfit(prices, k, i + 1, 0, dp); // buy
            notPick = findMaxProfit(prices, k, i + 1, 1, dp); // not buy
        }

        else
        {
            pick = prices[i] + findMaxProfit(prices, k - 1, i + 1, 1, dp); // sell
            notPick = findMaxProfit(prices, k, i + 1, 0, dp); // not sell
        }

        return dp[i][k][buy] = max(pick, notPick);
    }

    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(k + 1, vector<int>(2, -1)));

        return findMaxProfit(prices, k, 0, 1, dp);
    }
};


// Tabulation
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(k + 1, vector<int>(2, 0)));

        for(int i = n - 1; i >= 0; i--)
        {
            for(int t = 1; t <= k; t++)
            {
                for(int buy = 0; buy <= 1; buy++)
                {
                    int pick, notPick;

                    if(buy)
                    {
                        pick = -prices[i] + dp[i + 1][t][0]; // buy
                        notPick = dp[i + 1][t][1]; // not buy
                    }

                    else
                    {
                        pick = prices[i] + dp[i + 1][t - 1][1]; // sell
                        notPick = dp[i + 1][t][0]; // not sell
                    }

                    dp[i][t][buy] = max(pick, notPick);
                }
            }
        }

        return dp[0][k][1];
    }
};


// Space Optimization
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> prev(k + 1, vector<int>(2, 0));

        for(int i = n - 1; i >= 0; i--)
        {
            vector<vector<int>> temp(k + 1, vector<int>(2, 0));
            for(int t = 1; t <= k; t++)
            {
                for(int buy = 0; buy <= 1; buy++)
                {
                    int pick, notPick;

                    if(buy)
                    {
                        pick = -prices[i] + prev[t][0]; // buy
                        notPick = prev[t][1]; // not buy
                    }

                    else
                    {
                        pick = prices[i] + prev[t - 1][1]; // sell
                        notPick = prev[t][0]; // not sell
                    }

                    temp[t][buy] = max(pick, notPick);
                }
            }
            prev = temp;
        }

        return prev[k][1];
    }
};