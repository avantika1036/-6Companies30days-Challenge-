/* Question: You are given an m x n grid where each cell can have one of three values:

- 0 representing an empty cell,
- 1 representing a fresh orange, or
- 2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Difficulty: Medium */


class Solution {
public:
    void makeRot(vector<vector<int>>& grid, queue<pair<int, int>>& q, int& minutes)
    {
        int m = grid.size(), n = grid[0].size();
        vector<pair<int, int>> dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        while(!q.empty())
        {
            int qSize = q.size();
            bool hasRotten  = false;

            for(int i = 0; i < qSize; i++)
            {
                int r = q.front().first;
                int c = q.front().second;
                q.pop();
                
                for(auto dir: dirs)
                {
                    int new_row = r + dir.first;
                    int new_col = c + dir.second;

                    if(new_row >= 0 && new_col >= 0 && new_row < m && new_col < n && grid[new_row][new_col] == 1)
                    {   
                        grid[new_row][new_col] = 2;
                        q.push({new_row, new_col});
                        hasRotten = true;
                    }             
                }
            }

            if(hasRotten) minutes++; // inc6\ count if rotted neighbours have spoiled good oranges
        }
    }

    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), minutes = 0;
        queue<pair<int, int>> q;

        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 2)
                {
                    q.push({i, j});
                }
            }
        }

        makeRot(grid, q, minutes);
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 1) return -1;
            }
        }

        return minutes;
    }
};