/* Question: Given an integer array nums and two integers k and p, return the number of distinct subarrays, which have at most k elements that are divisible by p.

Two arrays nums1 and nums2 are said to be distinct if:

- They are of different lengths, or
- There exists at least one index i where nums1[i] != nums2[i].
A subarray is defined as a non-empty contiguous sequence of elements in an array.

Difficulty: Medium */


class Solution {
public:
    int countDistinct(vector<int>& nums, int k, int p) {
        int n = nums.size();
        set<vector<int>> uniqueSubArrays;

        for(int i = 0; i < n; i++)
        {
            vector<int> subarray;
            int countDivisible = 0;

            for(int j = i; j < n; j++)
            {
                subarray.push_back(nums[j]);

                if(nums[j] % p == 0) 
                {
                    countDivisible++;
                }

                if(countDivisible <= k) uniqueSubArrays.insert(subarray);
            }
        }

        return uniqueSubArrays.size();
    }
};