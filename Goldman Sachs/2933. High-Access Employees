/* Question: You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day.

The access time is represented as four digits using a 24-hour time format, for example, "0800" or "2250".

An employee is said to be high-access if he has accessed the system three or more times within a one-hour period.

Times with exactly one hour of difference are not considered part of the same one-hour period. For example, "0815" and "0915" are not part of the same one-hour period.

Access times at the start and end of the day are not counted within the same one-hour period. For example, "0005" and "2350" are not part of the same one-hour period.

Return a list that contains the names of high-access employees with any order you want.


Difficulty: Medium */


class Solution {
public:
    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        unordered_map<string, vector<string>> access;

        for(auto val: access_times)
        {
            string name = val[0];
            string time = val[1];
            access[name].push_back(time);
        }

        vector<string> ans;
        for(auto val: access)
        {
            string name = val.first;
            vector<string> st = val.second;

            if(st.size() < 3) continue;
            
            sort(st.begin(), st.end());

            for(int i = 0; i <= st.size() - 3; i++)
            {
                if(stoi(st[i + 2]) - stoi(st[i]) < 100)
                {
                    ans.push_back(name);
                    break;
                }
            }
        }

        return ans;
    }
};