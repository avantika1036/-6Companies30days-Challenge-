/* There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.

Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.

Implement the Solution class:

- Solution(int m, int n) Initializes the object with the size of the binary matrix m and n.
- int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.
- void reset() Resets all the values of the matrix to be 0.


Difficulty: Medium */


class Solution {
public:
    int m, n, remaining;
    unordered_map<int, int> map;

    Solution(int m, int n) {
        this -> m = m;
        this -> n = n;
        this -> remaining = m * n; // total remaining cells
    }
    
    vector<int> flip() {
        int randIdx = rand() % remaining; // gives random index between 1 - (remaining - 1) cells
        remaining--;

        // find if the radIdx is actually unused or not
        // if used then use the value availaible at that space ele use that value only
        int actualIdx = map.count(randIdx) ? map[randIdx] : randIdx;

        // swap the last unused value to the randIdx
        // if last value has already been remapped...eg when it was chosen as the 
        // ranIdx before curr  randIdx then use the remapped value
        map[randIdx] = map.count(remaining) ? map[remaining] : remaining;

        return {actualIdx / n, actualIdx % n}; // {row, col}
    }
    
    void reset() {
        map.clear();
        remaining = m * n;
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(m, n);
 * vector<int> param_1 = obj->flip();
 * obj->reset();
 */