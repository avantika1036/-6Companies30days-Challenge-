/* Question: You are given an integer matrix isWater of size m x n that represents a map of land and water cells.

- If isWater[i][j] == 0, cell (i, j) is a land cell.
- If isWater[i][j] == 1, cell (i, j) is a water cell.
- You must assign each cell a height in a way that follows these rules:

- The height of each cell must be non-negative.
- If the cell is a water cell, its height must be 0.
- Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).
- Find an assignment of heights such that the maximum height in the matrix is maximized.

Return an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.


Difficulty: Medium */


// Solution 1: BFS
// TC - O(r * c), SC - O(r * c)
class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int r = isWater.size(), c = isWater[0].size(), maxi = 0;
        vector<vector<int>> height(r, vector<int>(c, -1)); // initially mark everything as unvisited

        // Multi-source BFS Traversal
        queue<pair<int, int>> q;

        for(int i = 0; i < r; i++)
        {
            for(int j = 0; j < c; j++)
            {
                if(isWater[i][j] == 1) // mark water cell as 0
                {
                    q.push({i, j});
                    height[i][j] = 0;
                }
            }
        }

        while(!q.empty())
        {
            auto[x, y] = q.front();
            q.pop();

            vector<pair<int, int>> directions = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};

            for(auto[dx, dy]: directions)
            {
                int newX = x + dx;
                int newY = y + dy;

                if(newX >= 0 && newY >= 0 && newX < r && newY < c && height[newX][newY] == -1)
                {
                    q.push({newX, newY});
                    height[newX][newY] = height[x][y] + 1;
                }
            }
        }

        return height;
    }
};


// Solution 1: BFS
// TC - O(r * c), SC - O(1)
class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int r = isWater.size(), c = isWater[0].size(), maxi = 0;
        vector<vector<int>> height(r, vector<int>(c, r + c)); // assign heights to be greater than it could be initially

        // Two pass DP 
        queue<pair<int, int>> q;

        for(int i = 0; i < r; i++)
        {
            for(int j = 0; j < c; j++)
            {
                if(isWater[i][j] == 1) // mark water cell as 0
                {
                    height[i][j] = 0;
                }

                else
                {
                    if(i > 0) height[i][j] = min(height[i][j], height[i - 1][j] + 1); // check from top
                    if(j > 0) height[i][j] = min(height[i][j], height[i][j - 1] + 1); // check from left
                }
            }
        }

        for(int i = r - 1; i >= 0; i--)
        {
            for(int j = c - 1; j >= 0; j--)
            {
                if(i < r - 1) height[i][j] = min(height[i][j], height[i + 1][j] + 1); // check from bottom
                if(j < c - 1) height[i][j] = min(height[i][j], height[i][j + 1] + 1); // check from right
            }
        }

        return height;
    }
};