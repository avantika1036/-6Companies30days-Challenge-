/* Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

- Only numbers 1 through 9 are used.
- Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.


Difficulty: Medium */


class Solution {
public:
    void findComb(int k, int sum, vector<int> combo, vector<vector<int>>& ans, int start)
    {
        if(k == 0 && sum == 0) // for given k we achieved the sum
        {
            ans.push_back(combo);
        }

        if(k < 0 || sum < 0) return;

        for(int i = start; i <= 9; i++)
        {
            // pick i
            combo.push_back(i);
            findComb(k - 1, sum - i, combo, ans, i + 1); 

            // not pick i
            combo.pop_back();
        }
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> combo;
        vector<vector<int>> ans;

        findComb(k, n, combo, ans, 1);
        return ans;
    }
};