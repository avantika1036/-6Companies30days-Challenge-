/* Question: You are given a 0-indexed array of positive integers nums.

A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.

Return the total number of incremovable subarrays of nums.

Note that an empty array is considered strictly increasing.

A subarray is a contiguous non-empty sequence of elements within an array.

Difficulty: Easy */


class Solution {
public:
    bool isStrictlyInc(vector<int>& nums, int i, int j)
    {
        int n = nums.size();
        // to check the remaining elements(which is not in the subarray in range[i, j]) if it is strictly inc

        for(int k = 1; k < i; k++)
        {
            if(nums[k] <= nums[k - 1]) return false;
        }

        if(i > 0 && j < n - 1 && nums[i - 1] >= nums[j + 1]) return false; //  check transition from nums[i-1] to nums[j+1]  

        for(int k = j + 1; k < n - 1; k++)
        {
            if(nums[k] >= nums[k + 1]) return false;
        }
        
        cout << i << ", " << j << endl;
        return true;
    }

    int incremovableSubarrayCount(vector<int>& nums) {
        int n = nums.size(), count = 0;

        for(int i = 0; i < n; i++)
        {
            for(int j = i; j < n; j++)
            {
                if(isStrictlyInc(nums, i, j)) count++;
            }
        }
        
        return count;
    }
};