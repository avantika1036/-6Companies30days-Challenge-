/* Question: Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.

Difficulty: Easy */


// Solution 1: TC - O(n * m), SC - O(1)
class Solution {
public:
    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {
        int count = 0;
        for(int n1: arr1)
        {
            bool flag = true;

            for(int n2: arr2)
            {
                if(abs(n2 - n1) <= d)
                {
                    flag = false;
                    break;
                }
            }

            if(flag == true) count++;
        }

        return count;
    }
};


// Solution 2: TC - O(m log m + n), SC - O(1)
class Solution {
public:
    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {
        int count = 0;
        sort(arr2.begin(), arr2.end());

        for(int n1: arr1)
        {
            auto it = lower_bound(arr2.begin(), arr2.end(), n1 - d); 

            // element found in valid range for |arr1[i]-arr2[j]| <= d
            if(it != arr2.end() && *it <= n1 + d) continue;
            count++;
        }

        return count;
    }
};