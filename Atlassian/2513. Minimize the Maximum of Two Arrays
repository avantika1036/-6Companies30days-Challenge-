/* Question: We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:

- arr1 contains uniqueCnt1 distinct positive integers, each of which is not divisible by divisor1.
- arr2 contains uniqueCnt2 distinct positive integers, each of which is not divisible by divisor2.
- No integer is present in both arr1 and arr2.
Given divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.

Difficulty: Medium */


class Solution {
public:
    long long lcm(long long a, long long b)
    {
        return (a * b) / __gcd(a, b);
    }

    bool isValid(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2, long long maxNum)
    {
        long long div1 = maxNum / divisor1; // nos. divisible by divisor1
        long long div2 = maxNum / divisor2; // nos. divisible by divisor2
        long long both = maxNum / lcm(divisor1, divisor2); //nos. divisible by both divisors

        long long valid1 = maxNum - div1; // nos. that can be put in arr1
        long long valid2 = maxNum - div2; // nos. that can be put in arr2
        long long bothValid = maxNum - both; // nos. that can be put in either arr

        return valid1 >= uniqueCnt1 && valid2 >= uniqueCnt2 && bothValid >= uniqueCnt1 + uniqueCnt2;
    }

    int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {
        long long l = 1, r = 1e17;

        while(l <= r)
        {
            long long mid = (l + r) / 2;

            if(isValid(divisor1, divisor2, uniqueCnt1, uniqueCnt2, mid))
            {
                r = mid - 1;
            }

            else
            {
                l = mid + 1;
            }
        }

        return l;      
    }
};