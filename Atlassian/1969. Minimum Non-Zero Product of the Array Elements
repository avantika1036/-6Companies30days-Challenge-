/* Question: You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:

- Choose two elements x and y from nums.
- Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.
For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.

Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.

Note: The answer should be the minimum product before the modulo operation is done.

Difficulty: Medium */


class Solution {
public:
    int mod = 1e9 + 7;

    long long power(long long base, long long exp)
    {
        if(exp == 0) return 1;
        if(exp == 1) return base % mod;

        long long temp = power(base, exp / 2);

        if(exp % 2 == 0)
        {
            return (temp * temp) % mod;
        }

        else
        {
            temp = (temp * temp) % mod; 
            base %= mod;
            return (temp * base) % mod;
        }
    }

    int minNonZeroProduct(int p) {
        long long range = pow(2, p);
        range--; 

        long long exp = range / 2;
        long long base = range - 1;

        long long max_product = power(base, exp);
        return (max_product * (range % mod)) % mod;
    }
};